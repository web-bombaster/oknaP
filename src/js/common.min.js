
document.addEventListener(
	"DOMContentLoaded", () => {
		function loadData() {
	return new Promise((resolve, reject) => {
	  	// setTimeout не является частью решения
	  	// Код ниже должен быть заменен на логику подходящую для решения вашей задачи
		setTimeout(resolve, 100);
	})
};

loadData()
	.then(() => {
		let preloaderEl = document.getElementById('preloader');
		preloaderEl.classList.add('hidden');
		preloaderEl.classList.remove('visible');
	});// функция будет перемещать блок в указанное место при определенной ширине экрана

let moving = function () {
	const windowWidth = window.innerWidth; // ширина экрана
	// console.log(windowWidth);

	// перемещение меню
	if (windowWidth <= 1024) {
		document
			.querySelector(".mobile-menu__box")
			.prepend(document.querySelector(".nav-menu"));
	} else {
		document
			.querySelector(".nav .container")
			.append(document.querySelector(".nav-menu"));
	}

	// перемещение меню
	if (windowWidth <= 660) {
		document
			.querySelector(".footer__bottom")
			.prepend(document.querySelector(".not-offer"));
	} else {
		document
			.querySelector(".footer__col.text")
			.append(document.querySelector(".not-offer"));
	}
};

moving();
window.addEventListener("resize", moving);
const headerFixed = () => {
    if (document.documentElement.clientWidth <= 1024) {
        const heightHeader = document.querySelector('.header').offsetHeight; // высота хедера
        document.body.style.paddingTop = heightHeader + 'px';
    } else {
        document.body.style.paddingTop = 0;
    };
};

headerFixed();
// запускаем headerFixed при ресайзе
window.addEventListener("resize", headerFixed);// Показать / скрыть мобильное меню
function mobileMenu() {
	if (document.querySelector(".jsMobileMenuBtnToggle")) {
		const menuBtn = document.querySelector(".jsMobileMenuBtnToggle");
		const body = document.querySelector("body");
		const menu = document.querySelector(".mobile-menu");

		function mobileMenuOpen() {
			menu.classList.add("toggle");
			body.classList.add("toggle");
			menuBtn.classList.add("toggle");
		}

		function mobileMenuClose() {
			menu.classList.remove("toggle");
			body.classList.remove("toggle");
			menuBtn.classList.remove("toggle");
		}

		// Показать / скрыть мобильное меню
		function menuToggle() {
			if (!menuBtn.classList.contains("toggle")) {
				mobileMenuOpen();
			} else {
				mobileMenuClose();
			}
		}

		menuBtn.addEventListener("click", menuToggle);

		window.addEventListener(
			"resize",
			function () {
				mobileMenuClose();
			},
			true
		);

		// Закрываем мобильное меню по клику вне его
		function closeMobileMenu() {
			document.addEventListener("click", function (e) {
				const target = e.target;
				const its_menu = target == menu || menu.contains(target);
				const its_btnMenu = target == menuBtn || menuBtn.contains(target);
				
				if (!its_menu && !its_btnMenu) {
					mobileMenuClose();
				}
			});
		}

		closeMobileMenu();
	}
}

mobileMenu();
// Вычисление позиции и размера панели мобильного меню

if (document.querySelector(".jsMobileMenuBtnToggle")) {
	let menuPanelInit = function () {

		const menuBtn = document.querySelector(".jsMobileMenuBtnToggle");
		
		// Определяем высоту мобильного меню и размещаем под шапкой
		function menuPanelPosition() {
			const heightViewport = document.documentElement.clientHeight;
			const heightHeader = document.querySelector(".header").offsetHeight;
			const heightMenuOverlay = heightViewport - heightHeader;

			const menuActive = document.querySelector(".mobile-menu.toggle");

			if (menuActive) {
				menuActive.style.height = heightViewport + "px";
				menuActive.style.paddingTop = heightHeader + "px";
			}

		}

		menuBtn.addEventListener("click", menuPanelPosition);
	};

	menuPanelInit();
}



// -include './myscripts/subMenuMobileToggle.js'
		// Показать / скрыть скрытый текст отзыва
if (document.querySelector(".cr-item__text-more")) {
	const textMore = document.getElementsByClassName('cr-item__text-more');
    for (let element of textMore) {
        // console.log(element);

        element.addEventListener("click", () => {
			element.parentNode.firstElementChild.classList.toggle("active");
			if (element.textContent == "Скрыть") {
				element.textContent = "Читать далее";
			} else {
				element.textContent = "Скрыть";
			};
		});
    };
};
// Инициализация слайдера swiper
// https://swiperjs.com/

// Кнопки-табы для блока "Окна Rehau по цене производителя"
function initSwiper() {
	if (document.querySelector(".why-popular__slider")) {
		const whyPopularSlider = new Swiper(".why-popular__slider", {
			spaceBetween: 20,
			slidesPerView: 1,
			loop: true,

			pagination: {
				el: ".why-popular__pagination",
				clickable: true,
			},

			navigation: {
				nextEl: ".why-popular__next",
				prevEl: ".why-popular__prev",
			},
		});
	};

	if (document.querySelector(".our-works__slider")) {
		const prodSliderInner = new Swiper(".our-works__slider", {
			spaceBetween: 20,
			slidesPerView: 1,
			loop: true,

			pagination: {
				el: ".our-works__pagination",
				clickable: true,
			},

			navigation: {
				nextEl: ".our-works__next",
				prevEl: ".our-works__prev",
			},
		});
	};

	if (document.querySelector(".pr-slider")) {
		let menu = ["Blitz", "Grazio", "Delight", "Intelio"];

		const prodSliderInner = new Swiper(".pr-slider", {
			spaceBetween: 20,
			slidesPerView: 1,
			pagination: {
				el: ".pr-btns",
				clickable: true,
				bulletClass: "pr-btns__item",
				renderBullet: function (index, className) {
					return (
						'<span class="' +
						className +
						'">' +
						menu[index] +
						"</span>"
					);
				},
			},
		});
	};

	// Окна Rehau по цене производителя - вложенный слайдер
	if (document.querySelector(".slider-windows")) {
		const prodSliderInner = new Swiper(".slider-windows", {
			spaceBetween: 20,
			slidesPerView: 1,
			loop: true,
			disableOnInteraction: false,
			pauseOnMouseEnter: true,
			breakpoints: {
				500: {
					slidesPerView: 2,
					spaceBetween: 10,
					loop: true,
				},
				768: {
					slidesPerView: 3,
					spaceBetween: 20,
					loop: true,
				},
				1001: {
					slidesPerView: 4,
					spaceBetween: 20,
					loop: true,
				},
			},
			pagination: {
				el: ".slider-windows__pagination",
				clickable: true,
			},
			navigation: {
				nextEl: ".slider-windows__next",
				prevEl: ".slider-windows__prev",
			},
		});
	};

	// Профильные системы Rehau
	if (document.querySelector(".systems-rehau__slider")) {
		const prodSliderInner = new Swiper(".systems-rehau__slider", {
			spaceBetween: 20,
			slidesPerView: 1,
			loop: true,
			disableOnInteraction: false,
			pauseOnMouseEnter: true,
			breakpoints: {
				500: {
					slidesPerView: 2,
					spaceBetween: 10,
					loop: true,
				},
				768: {
					slidesPerView: 3,
					spaceBetween: 20,
					loop: true,
				},
				1001: {
					slidesPerView: 4,
					spaceBetween: 20,
					loop: true,
				},
			},
			navigation: {
				nextEl: ".systems-rehau__next",
				prevEl: ".systems-rehau__prev",
			},
			pagination: {
				el: ".systems-rehau__pagination",
				clickable: true,
			},
		});
	}

	// Окна Rehau по цене производителя - вложенный слайдер
	if (document.querySelector(".customer-reviews__slider")) {
		const customerReviewsSlider = new Swiper(".customer-reviews__slider", {
			spaceBetween: 10,
			slidesPerView: 1,
			loop: true,
			// disableOnInteraction: false,
			// pauseOnMouseEnter: true,
			breakpoints: {
				768: {
					slidesPerView: 2,
					spaceBetween: 20,
					loop: true,
				},
			},
			pagination: {
				el: ".customer-reviews__pagination",
				clickable: true,
			},
			navigation: {
				nextEl: ".customer-reviews__next",
				prevEl: ".customer-reviews__prev",
			},
		});
	}

	// Наши сертификаты и гарантии
	if (document.querySelector(".certificates-slider")) {
		const certificatesSliderSlider = new Swiper(".certificates-slider", {
			spaceBetween: 12,
			slidesPerView: 2,
			loop: true,
			// disableOnInteraction: false,
			// pauseOnMouseEnter: true,
			breakpoints: {
				500: {
					slidesPerView: 3,
					spaceBetween: 20,
					loop: true,
				},
				660: {
					slidesPerView: 4,
					spaceBetween: 20,
					loop: true,
				},
				920: {
					slidesPerView: 5,
					spaceBetween: 20,
					loop: true,
				},
			},
			pagination: {
				el: ".certificates-slider__pagination",
				clickable: true,
				dynamicBullets: true,
			},
			navigation: {
				nextEl: ".certificates-slider__next",
				prevEl: ".certificates-slider__prev",
			},
		});
	}
}

// window.addEventListener("resize", initSwiper);
window.addEventListener("resize", function () {
	// setTimeout(initSwiper, 200);
	initSwiper();
	// swiper.init();
});

initSwiper();
// Использую для аккордионов, faq
const tabsToggle = function (tabBtnClass, tabContentClass) {
	if (document.querySelector(tabBtnClass)) {
		const tabsBtn = document.querySelectorAll(tabBtnClass); // все кнопки табов
		const tabsContent = document.querySelectorAll(tabContentClass); // все содержимое табов

		// Перебираем кнопки табов, по которым можем щелкнуть
		tabsBtn.forEach(function (btn, index) {
			// Вешаем событие клика на каждую кнопку
			btn.addEventListener("click", function (e) {
				e.preventDefault();
				if (btn.classList.contains("toggle")) {
					tabsBtn[index].classList.remove("toggle");
					tabsContent[index].classList.remove("toggle");
				} else {
					// у кнопки, по которой щелкнули, добавить класс активности
					tabsBtn[index].classList.add("toggle");
					// у содержимого с этим индексом добавить класс активности
					tabsContent[index].classList.add("toggle");
				}
			});
		});
	}
};

// tabsToggle(".footer-top__title", ".footer-menu");
tabsToggle(".footer-top__title", ".footer-top__col");
tabsToggle(".faq-item__title", ".questions-faq__item");
tabsToggle(".nav-menu__link--open-panel", ".nav-menu__submenu");

// Табы. Параметры: класс для кнопок табов и класс содержимого табов
const tabsToggle2 = function (tabBtnClass, tabContentClass) {
	if (document.querySelector(tabBtnClass)) {
		const tabsBtn = document.querySelectorAll(tabBtnClass); // все кнопки табов
		const tabsContent = document.querySelectorAll(tabContentClass); // все содержимое табов

		// Перебираем кнопки табов, по которым можем щелкнуть
		tabsBtn.forEach(function (btn, index) {
			// Вешаем событие клика на каждую кнопку
			btn.addEventListener("click", function () {
				// у всех кнопок одного родителя убрать класс активности
				tabsBtn[index].parentNode
					.querySelectorAll(tabBtnClass)
					.forEach(function (element) {
						element.classList.remove("toggle");
					});

				// у кнопки, по которой щелкнули, добавить класс активности
				tabsBtn[index].classList.add("toggle");

				// у каждого содержимого одного родителя удалить класс активности
				tabsContent[index].parentNode
					.querySelectorAll(tabContentClass)
					.forEach(function (element) {
						element.classList.remove("toggle");
					});

				// у содержимого с этим индексом добавить класс активности
				tabsContent[index].classList.add("toggle");
			});
		});
	}
};

tabsToggle2(".windes-tabs__btn", ".windes-tabs__content");

// по клику на элемент у всех подобных убираем .toggle, а у выбранного добавляем его
let classToggleForElement = function(classElement) {
	if (document.querySelector(classElement)) {
		let items = document.querySelectorAll(classElement);

		items.forEach(function(element, index) {
			element.addEventListener('click', function() {
				items.forEach(function(element) {
					element.classList.remove('toggle');
				});
				this.classList.toggle('toggle');
			});
		});
	};
};

classToggleForElement(".lamination-item__view");
classToggleForElement(".handles-item__view");

// щелчок по элементу
// находим нужный дочерний
// забираем его фон
// задаем такой же фон для нужного элемента
// параметры: элемент по которому щелкаем, элемент, у которого забараем фон, элемент, элемент, которому задаем фон
const windowDesigner = function (element, preview, target) {
	if (document.querySelector(element) && document.querySelector(preview) && document.querySelector(target)) {
		let elements = document.querySelectorAll(element);
		let previews = document.querySelectorAll(preview);
		let bgImg;
		elements.forEach(function(element) {
			element.addEventListener('click', function() {
				bgImg = this.querySelector(preview).getAttribute('style');
				document.querySelector(target).setAttribute('style', bgImg);
			});
		});
	};
};

windowDesigner(".lamination-item", ".lamination-item__view", ".laminator-texture");
windowDesigner(".handles-item", ".handles-item__view", ".laminator-handle__01");
windowDesigner(".handles-item", ".handles-item__view", ".laminator-handle__02");// функция будет перемещать блок в указанное место при определенной ширине экрана

let compareProfile = function () {
	if (document.querySelector(".compare-profile__grid")) {
		const windowWidth = window.innerWidth; // ширина экрана

		let table = document.querySelector(".compare-profile__grid"); // таблица для сдвига
		let next = document.querySelector(".compare-profile__next");
		let prev = document.querySelector(".compare-profile__prev");
		let btnsNav = document.querySelectorAll(".compare-profile__pagination span");

		let indent; // отступ при пролистывании одного столбца
		let countIndent = 1; // коэффициент сдвига

		let steps; // количество возможных сдвигов
		let stepsNext; // количество возможных сдвигов Next
		let stepsPrev; // количество возможных сдвигов Prev



		let offsetGrid = 0; // Вычисленное значение сдвига для таблицы

		// Смещаем таблицу на нужное значение
		function gridTransform() {
			offsetGrid = "translateX(" + offsetGrid + "%)";
			table.style.transform = offsetGrid;
		};
		gridTransform();

		function nextBtnEnable() {
			next.style.cursor = 'pointer';
			next.style.opacity = '1';
		};

		function prevBtnEnable() {
			prev.style.cursor = 'pointer';
			prev.style.opacity = '1';
		};

		function nextBtnDisable() {
			next.style.opacity = '.6';
			next.style.cursor = 'initial';
		};

		function prevBtnDisable() {
			prev.style.opacity = '.6';
			prev.style.cursor = 'initial';
		};

		// Даем класс активности для пагинации при кликах по стрелкам
		function paginationBtnActive(numer) {
			btnsNav.forEach(function(element, index) {
				element.classList.remove('active');
			});
			btnsNav[numer].classList.add('active');
		};

		switch (true) {
			case windowWidth <= 480 && windowWidth >= 341:
				indent = 50;
				steps = 2;
				break;

			case windowWidth <= 340:
				indent = 100;
				steps = 3;
				break;

			default:
				indent = 33.33333;
				steps = 1;
				break;
		}


		stepsNext = steps; // инизиализация количества возможных сдвигов Next
		stepsPrev = steps - stepsNext;

		console.log("steps - " + steps);
		console.log("stepsNext - " + stepsNext);
		console.log("stepsPrev - " + stepsPrev);

		prevBtnDisable();

		next.addEventListener("click", function () {
			if (stepsNext >= 1) {
				offsetGrid = -1 * indent * countIndent;
				gridTransform();

				stepsNext--;
				stepsPrev = steps - stepsNext;
				countIndent++;

				console.log("stepsNext - " + stepsNext);
				console.log("stepsPrev - " + stepsPrev);

			};

			prevBtnEnable();

			if (stepsNext===0) {
				nextBtnDisable();
			};

			paginationBtnActive(stepsPrev);
		});

		prev.addEventListener("click", function () {
			if (stepsNext < steps) {
				countIndent--;
				stepsNext++;
				stepsPrev = steps - stepsNext;

				offsetGrid = -1 * indent * (countIndent - 1);
				gridTransform();
			};

			nextBtnEnable();

			if (stepsPrev===0) {
				prevBtnDisable();
			};

			paginationBtnActive(stepsPrev);
		});


		btnsNav.forEach(function(element, index) {
			element.addEventListener('click', function(e) {
				// У соседей удаляем класс активности
				const adjacentNtns = this.parentNode.querySelectorAll('span');
				adjacentNtns.forEach(function(element) {
					element.classList.remove('active');
				});
				this.classList.add('active');

				offsetGrid = -1 * indent * index;
				gridTransform();

				nextBtnEnable();
				prevBtnEnable();

				if (index == 0) {
					prevBtnDisable();
					nextBtnEnable();
				};

				if (index == steps) {
					nextBtnDisable();
					prevBtnEnable();
				};
			});
		});
	};
};

compareProfile();
window.addEventListener("resize", compareProfile);
// Написать: При открытии селекта написать закрытие других


// по щелчку на кнопку ctktrnfселекта выпадают доступные варианты выбора
let selectToggle = function() {
    if (document.querySelector('.calculator-select__current')) {
        // const btnSelect = document.querySelector('.calculator-select__current');
        const btnsSelect = document.querySelectorAll('.calculator-select__current');

        btnsSelect.forEach(function (btn, index) {
            btn.addEventListener('click', function() {

                let btnPosition = index;
                console.log("btnPosition - " + btnPosition);

                btnsSelect.forEach(function (btn, index) {
                    if (btn != btn[btnPosition]) {
                        btn.classList.remove('toggle');
                        btn.nextElementSibling.classList.remove('toggle');
                    } else {
                        // btn[btnPosition].classList.toggle('toggle');
                        // btn.nextElementSibling.classList.toggle('toggle');
                    };
                });

                // this.classList.toggle('toggle');
                // this.nextElementSibling.classList.toggle('toggle');

                if (btnsSelect[btnPosition].classList.contains('toggle')) {
                    // this.nextElementSibling.classList.add('toggle');
                    btnsSelect[btnPosition].classList.remove('toggle');
                    btnsSelect[btnPosition].nextElementSibling.classList.remove('toggle');
                } else {
                    btnsSelect[btnPosition].classList.add('toggle');
                    btnsSelect[btnPosition].nextElementSibling.classList.add('toggle');
                };

                // btnsSelect[btnPosition].classList.toggle('toggle');
                // btnsSelect[btnPosition].nextElementSibling.classList.toggle('toggle');

                // btnsSelect[btnPosition].classList.toggle('toggle');
                // if (btnsSelect[btnPosition].classList.contains('toggle')) {
                //     btnsSelect[btnPosition].nextElementSibling.classList.add('toggle');
                // } else {
                //     btnsSelect[btnPosition].nextElementSibling.classList.remove('toggle');
                // };



                // this.classList.toggle('toggle');
                // if (this.classList.contains('toggle')) {
                //     this.nextElementSibling.classList.add('toggle');
                // } else {
                //     this.nextElementSibling.classList.remove('toggle');
                // };


            });
        });

    };
};
selectToggle();

// по щелчку вариант
let selectVariant = function() {
    if (document.querySelector('.variants-item')) {
        const btnVariants = document.querySelectorAll('.variants-item');
        let variantTitle;
        // по клику на вариант сортировки у всех убираем .toggle, а у активного добавляем его
        btnVariants.forEach(function(element) {
            element.addEventListener('click', function() {
                element.parentElement.querySelectorAll('.variants-item').forEach(function(element) {
                    element.classList.remove('toggle');
                });

                // this.classList.toggle('toggle');
                this.classList.add('toggle');

                // Текст выбраного варианта в кнопку
                variantTitle = this.innerText;
                this.parentElement.previousElementSibling.querySelector('.title').innerText = variantTitle;
                this.parentElement.classList.remove('toggle');
                this.parentElement.previousElementSibling.classList.remove('toggle');
            });
        });
    };
};
selectVariant();// -include './myscripts/burger.js'
		// -include './myscripts/form.js'
		// -include './myscripts/accordeon.js'
		// -include './myscripts/blazy-init.js'
	}
);